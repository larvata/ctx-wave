#!/bin/bash

VER=`cat package.json| jq -r '.version'`

CHROME_PKG=ctx_wave_${VER}_chrome_unsigned.zip
FIREFOX_PKG=ctx_wave_${VER}_firefox_unsigned.zip
EDGE_PKG=ctx_wave_${VER}_edge_unsigned.zip
ZIP_FILE_PATH=../${CHROME_PKG}

FF_EXTENSION_ID="<TODO>"
FF_ADDITIONAL_PROPERTY=". + { \"browser_specific_settings\": { \"gecko\": { \"id\": \"{${FF_EXTENSION_ID}}\", \"strict_min_version\": \"70.0\" } } }"

RELEASE_PATH="publish"

mkdir $RELEASE_PATH 2>/dev/null

if [[ -f $RELEASE_PATH/$CHROME_PKG ]]; then
  rm $RELEASE_PATH/$CHROME_PKG
fi
if [[ -f $RELEASE_PATH/$FIREFOX_PKG ]]; then
  rm $RELEASE_PATH/$FIREFOX_PKG
fi

npm run build

(cd dist && \
  zip -r ../$RELEASE_PATH/$CHROME_PKG * \
    -x "*.DS_Store" \
    -x "__MACOSX" \
    -x "*.map" \
    -x "_firefox")

# create manifest for firefox
jq "${FF_ADDITIONAL_PROPERTY}" dist/manifest.json > $RELEASE_PATH/manifest.json

cp $RELEASE_PATH/$CHROME_PKG $RELEASE_PATH/$FIREFOX_PKG
cp $RELEASE_PATH/$CHROME_PKG $RELEASE_PATH/$EDGE_PKG
(cd $RELEASE_PATH && zip $FIREFOX_PKG manifest.json)

# cleanup
rm $RELEASE_PATH/manifest.json
